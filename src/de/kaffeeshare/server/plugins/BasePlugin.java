/*******************************************************************************
 * Copyright 2013 Jens Breitbart, Daniel Klemm, Dennis Obermann
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package de.kaffeeshare.server.plugins;

import java.net.URL;
import java.util.logging.Logger;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import de.kaffeeshare.server.datastore.DatastoreManager;
import de.kaffeeshare.server.datastore.Item;

/**
 * Abstract base class for all plugins.
 * 
 * A plugin has to implement the "match" method to select the urls handled by the plugin.
 * Specialized outputs are generated by overriding the methods.
 */
public abstract class BasePlugin {

	protected static final Logger log = Logger.getLogger(BasePlugin.class.getName());
	
	/**
	 * Check URL for a matching.
	 * @param url URL
	 * @return true, if plugin match otherwise false
	 */
	public abstract boolean match(URL url);

	/**
	 * Create an item.
	 * @param url URL
	 * @return Item
	 */
	public Item createItem(URL url) {
		log.info("Running " + this.getClass().getName() + " plugin!");

		String urlString = url.toString();
		String caption = "";
		String description = "";
		String imageUrl = "";
		
		Document doc;
		try {
			doc = Jsoup.parse(url, 10000);
			
			caption = getCaption(doc);
			log.info("caption: " + caption);
			
			description = getDescription(doc);
			log.info("description: " + description);
			
			imageUrl = getImageUrl(doc);
			log.info("image url: " + imageUrl);
			
			urlString = getProperty(doc, "og:url");
			
		} catch (Exception e1) {
			// Use empty strings.
		}

		return DatastoreManager.getDatastore().createItem(caption, urlString, description, imageUrl);
	}

	/**
	 * Get the caption.
	 * @param doc Document
	 * @return Caption
	 */
	protected String getCaption(Document doc) {

		String caption = null;
		try {
			caption = getProperty(doc, "og:title");
		} catch (Exception e) {}

		if (caption == null) {
			try {
				caption = doc.select("title").first().text();
			} catch (Exception e) {
				caption = "";
			}
		}
		
		return caption;
	}
	
	/**
	 * Get the description.
	 * @param doc Document
	 * @return Description
	 */
	protected String getDescription(Document doc) {
		
		String description = null;
		try {
			description = getProperty(doc, "og:description");
		} catch (Exception e) {}
		
		if (description == null) {
			try {
				description = doc.getElementsByAttributeValue("name", "description")
				                 .first().attr("content");
			} catch (Exception e) {
				description = "";
			}
		}
		
		return description;
	}

	/**
	 * Get the image url.
	 * @param doc Document
	 * @return Image url
	 */
	protected String getImageUrl(Document doc) {
	
		String imageUrl = "";
		try {
			imageUrl = getProperty(doc, "og:image");
			imageUrl.replace(" ", "");
			
			// check if URL is a legit URL as og:url is broken on some sites 
			// throws an exception if URL is not ok
			URL u = new URL(imageUrl);
			u.toURI(); 			
		} catch (Exception e) {
			imageUrl = "";
		}
		
		return imageUrl;
	}
	
	/**
	 * Get the property content.
	 * @param doc Document
	 * @param prop Property
	 * @return Caption
	 */
	protected String getProperty(Document doc, String prop) {
		String caption;
		caption = doc.getElementsByAttributeValue("property", prop)
		             .first().attr("content");
		return caption;
	}	
}
